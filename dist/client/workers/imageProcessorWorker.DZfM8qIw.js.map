{"version":3,"file":"imageProcessorWorker.DZfM8qIw.js","sources":["../src/workers/imageProcessorWorker.ts"],"sourcesContent":["self.onmessage = async (event) => {\r\n  if (event.data.action === 'processImage') {\r\n    const { id, src, width, height } = event.data;\r\n    \r\n    // Load the image\r\n    const img = await fetch(src).then(res => res.blob()).then(blob => createImageBitmap(blob));\r\n    \r\n    // Create a low-resolution version\r\n    const canvas = new OffscreenCanvas(width / 4, height / 4);\r\n    const ctx = canvas.getContext('2d');\r\n    if (ctx) {\r\n      ctx.drawImage(img, 0, 0, width / 4, height / 4);\r\n      const lowResBlob = await canvas.convertToBlob({ type: 'image/jpeg', quality: 0.5 });\r\n      const lowResUrl = URL.createObjectURL(lowResBlob);\r\n      \r\n      // Send the low-res version immediately\r\n      self.postMessage({ action: 'imageProcessed', id, processedImage: lowResUrl, quality: 'low' });\r\n      \r\n      // Process the full-resolution image\r\n      const fullCanvas = new OffscreenCanvas(width, height);\r\n      const fullCtx = fullCanvas.getContext('2d');\r\n      if (fullCtx) {\r\n        fullCtx.drawImage(img, 0, 0, width, height);\r\n        const fullBlob = await fullCanvas.convertToBlob({ type: 'image/jpeg', quality: 0.9 });\r\n        const fullUrl = URL.createObjectURL(fullBlob);\r\n        \r\n        // Send the full-res version\r\n        self.postMessage({ action: 'imageProcessed', id, processedImage: fullUrl, quality: 'high' });\r\n      } else {\r\n        console.error('Failed to get 2D context for full canvas');\r\n      }\r\n    } else {\r\n      console.error('Failed to get 2D context for low-res canvas');\r\n    }\r\n  }\r\n};\r\n"],"names":["self","onmessage","async","event","data","action","id","src","width","height","img","fetch","then","res","blob","createImageBitmap","canvas","OffscreenCanvas","ctx","getContext","drawImage","lowResBlob","convertToBlob","type","quality","lowResUrl","URL","createObjectURL","postMessage","processedImage","fullCanvas","fullCtx","fullBlob","fullUrl","console","error"],"mappings":"AAAAA,KAAKC,UAAYC,MAAOC,IAClB,GAAsB,iBAAtBA,EAAMC,KAAKC,OAA2B,CACxC,MAAMC,GAAEA,EAAIC,IAAAA,EAAAC,MAAKA,EAAOC,OAAAA,GAAWN,EAAMC,KAGnCM,QAAYC,MAAMJ,GAAKK,MAAKC,GAAOA,EAAIC,SAAQF,MAAaE,GAAAC,kBAAkBD,KAG9EE,EAAS,IAAIC,gBAAgBT,EAAQ,EAAGC,EAAS,GACjDS,EAAMF,EAAOG,WAAW,MAC9B,GAAID,EAAK,CACPA,EAAIE,UAAUV,EAAK,EAAG,EAAGF,EAAQ,EAAGC,EAAS,GACvC,MAAAY,QAAmBL,EAAOM,cAAc,CAAEC,KAAM,aAAcC,QAAS,KACvEC,EAAYC,IAAIC,gBAAgBN,GAGjCrB,KAAA4B,YAAY,CAAEvB,OAAQ,iBAAkBC,KAAIuB,eAAgBJ,EAAWD,QAAS,QAGrF,MAAMM,EAAa,IAAIb,gBAAgBT,EAAOC,GACxCsB,EAAUD,EAAWX,WAAW,MACtC,GAAIY,EAAS,CACXA,EAAQX,UAAUV,EAAK,EAAG,EAAGF,EAAOC,GAC9B,MAAAuB,QAAiBF,EAAWR,cAAc,CAAEC,KAAM,aAAcC,QAAS,KACzES,EAAUP,IAAIC,gBAAgBK,GAG/BhC,KAAA4B,YAAY,CAAEvB,OAAQ,iBAAkBC,KAAIuB,eAAgBI,EAAST,QAAS,QAAQ,MAE3FU,QAAQC,MAAM,2CAChB,MAEAD,QAAQC,MAAM,8CAChB"}