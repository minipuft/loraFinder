{"version":3,"file":"imageProcessorWorker.BHWxsclw.js","sources":["../src/workers/imageProcessorWorker.ts"],"sourcesContent":["// Add a flag to track cancellation state\nlet isCancelled = false;\n\nself.onmessage = async event => {\n  // Reset cancellation flag on new processing requests\n  if (event.data.action === 'processImage' || event.data.action === 'processBatch') {\n    isCancelled = false;\n  }\n\n  // Handle cancellation message\n  if (event.data.action === 'cancel') {\n    isCancelled = true;\n    // Optionally, add logic here to try and abort ongoing fetch/canvas operations if possible,\n    // but it's complex. Setting the flag might be sufficient for now.\n    console.log('Worker: Cancellation requested.');\n    return; // Stop further processing in this message handler\n  }\n\n  // --- Existing processing logic ---\n  if (event.data.action === 'processImage') {\n    // Check cancellation flag before starting\n    if (isCancelled) {\n      console.log('Worker: Skipping processImage due to cancellation.');\n      return;\n    }\n    const { id, src, width, height } = event.data;\n\n    try {\n      // Wrap in try-catch for better error handling during fetch/processing\n      // Load the image\n      const img = await fetch(src)\n        .then(res => res.blob())\n        .then(blob => createImageBitmap(blob));\n\n      // Check cancellation flag again after await\n      if (isCancelled) {\n        console.log('Worker: Cancelling processImage mid-fetch.');\n        return;\n      }\n\n      // Create low-res\n      const lowResWidth = Math.round(width / 4);\n      const lowResHeight = Math.round(height / 4);\n      const canvas = new OffscreenCanvas(lowResWidth, lowResHeight);\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        ctx.drawImage(img, 0, 0, lowResWidth, lowResHeight);\n        const lowResBlob = await canvas.convertToBlob({ type: 'image/jpeg', quality: 0.5 });\n\n        // Check cancellation flag again after await\n        if (isCancelled) {\n          console.log('Worker: Cancelling processImage before sending low-res.');\n          return;\n        }\n\n        const lowResUrl = URL.createObjectURL(lowResBlob);\n\n        // Send low-res, INCLUDING the dimensions it was generated for\n        self.postMessage({\n          action: 'imageProcessed',\n          id,\n          processedImage: lowResUrl,\n          quality: 'low',\n          width: lowResWidth,\n          height: lowResHeight,\n        });\n\n        // Process the full-resolution image\n        const fullCanvas = new OffscreenCanvas(width, height);\n        const fullCtx = fullCanvas.getContext('2d');\n        if (fullCtx) {\n          fullCtx.drawImage(img, 0, 0, width, height);\n          const fullBlob = await fullCanvas.convertToBlob({ type: 'image/jpeg', quality: 0.9 });\n\n          // Check cancellation flag again after await\n          if (isCancelled) {\n            console.log('Worker: Cancelling processImage before sending high-res.');\n            return;\n          }\n\n          const fullUrl = URL.createObjectURL(fullBlob);\n\n          // Send high-res, INCLUDING the dimensions it was generated for\n          self.postMessage({\n            action: 'imageProcessed',\n            id,\n            processedImage: fullUrl,\n            quality: 'high',\n            width: width,\n            height: height,\n          });\n        } else {\n          console.error('Failed to get 2D context for full canvas');\n        }\n      } else {\n        console.error('Failed to get 2D context for low-res canvas');\n      }\n    } catch (error) {\n      // Handle fetch or processing errors\n      if (!isCancelled) {\n        // Don't log errors if cancellation was the cause\n        console.error(`Error processing image ${id}:`, error);\n      } else {\n        console.log(`Processing cancelled for image ${id}.`);\n      }\n    }\n  } else if (event.data.action === 'processBatch') {\n    // Add handling for batch processing cancellation\n    // Check cancellation flag before starting batch\n    if (isCancelled) {\n      console.log('Worker: Skipping processBatch due to cancellation.');\n      return;\n    }\n    const { images } = event.data;\n    console.log(`Worker: Starting batch processing for ${images.length} images.`);\n\n    // Process images sequentially for simplicity, checking cancellation between each\n    for (const image of images) {\n      // Check cancellation flag before processing each image in the batch\n      if (isCancelled) {\n        console.log(`Worker: Cancelling batch processing mid-way (at image ${image.id}).`);\n        return; // Exit the loop and stop processing the batch\n      }\n\n      const { id, src, width, height } = image;\n      try {\n        // Load the image\n        const img = await fetch(src)\n          .then(res => res.blob())\n          .then(blob => createImageBitmap(blob));\n\n        // Check cancellation flag again after await\n        if (isCancelled) {\n          console.log(`Worker: Cancelling batch processing during fetch for image ${id}.`);\n          return;\n        }\n\n        // Create low-res\n        const lowResWidth = Math.round(width / 4);\n        const lowResHeight = Math.round(height / 4);\n        const canvas = new OffscreenCanvas(lowResWidth, lowResHeight);\n        const ctx = canvas.getContext('2d');\n        if (ctx) {\n          ctx.drawImage(img, 0, 0, lowResWidth, lowResHeight);\n          const lowResBlob = await canvas.convertToBlob({ type: 'image/jpeg', quality: 0.5 });\n\n          // Check cancellation flag again after await\n          if (isCancelled) {\n            console.log(\n              `Worker: Cancelling batch processing before sending low-res for image ${id}.`\n            );\n            return;\n          }\n\n          const lowResUrl = URL.createObjectURL(lowResBlob);\n          // Send low-res with dimensions\n          self.postMessage({\n            action: 'imageProcessed',\n            id,\n            processedImage: lowResUrl,\n            quality: 'low',\n            width: lowResWidth,\n            height: lowResHeight,\n          });\n\n          // Create high-res\n          const fullCanvas = new OffscreenCanvas(width, height);\n          const fullCtx = fullCanvas.getContext('2d');\n          if (fullCtx) {\n            fullCtx.drawImage(img, 0, 0, width, height);\n            const fullBlob = await fullCanvas.convertToBlob({ type: 'image/jpeg', quality: 0.9 });\n\n            // Check cancellation flag again after await\n            if (isCancelled) {\n              console.log(\n                `Worker: Cancelling batch processing before sending high-res for image ${id}.`\n              );\n              return;\n            }\n\n            const fullUrl = URL.createObjectURL(fullBlob);\n            // Send high-res with dimensions\n            self.postMessage({\n              action: 'imageProcessed',\n              id,\n              processedImage: fullUrl,\n              quality: 'high',\n              width: width,\n              height: height,\n            });\n          } else {\n            console.error(`Failed to get 2D context for full canvas (image ${id})`);\n          }\n        } else {\n          console.error(`Failed to get 2D context for low-res canvas (image ${id})`);\n        }\n      } catch (error) {\n        if (!isCancelled) {\n          console.error(`Error processing image ${id} in batch:`, error);\n        } else {\n          console.log(`Batch processing cancelled for image ${id}.`);\n          return; // Stop the batch if cancelled during an error\n        }\n        // Optionally continue to the next image in the batch even if one fails?\n        // For now, we continue.\n      }\n    }\n    console.log(`Worker: Finished batch processing.`);\n  }\n};\n"],"names":["isCancelled","self","onmessage","async","event","data","action","console","log","id","src","width","height","img","fetch","then","res","blob","createImageBitmap","lowResWidth","Math","round","lowResHeight","canvas","OffscreenCanvas","ctx","getContext","drawImage","lowResBlob","convertToBlob","type","quality","lowResUrl","URL","createObjectURL","postMessage","processedImage","fullCanvas","fullCtx","fullBlob","fullUrl","error","images","length","image"],"mappings":"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"}