let e=!1;self.onmessage=async o=>{if("processImage"!==o.data.action&&"processBatch"!==o.data.action||(e=!1),"cancel"===o.data.action)return e=!0,void console.log("Worker: Cancellation requested.");if("processImage"===o.data.action){if(e)return void console.log("Worker: Skipping processImage due to cancellation.");const{id:a,src:r,width:s,height:n}=o.data;try{const o=await fetch(r).then((e=>e.blob())).then((e=>createImageBitmap(e)));if(e)return void console.log("Worker: Cancelling processImage mid-fetch.");const t=Math.round(s/4),c=Math.round(n/4),i=new OffscreenCanvas(t,c),g=i.getContext("2d");if(g){g.drawImage(o,0,0,t,c);const r=await i.convertToBlob({type:"image/jpeg",quality:.5});if(e)return void console.log("Worker: Cancelling processImage before sending low-res.");const l=URL.createObjectURL(r);self.postMessage({action:"imageProcessed",id:a,processedImage:l,quality:"low",width:t,height:c});const d=new OffscreenCanvas(s,n),h=d.getContext("2d");if(h){h.drawImage(o,0,0,s,n);const t=await d.convertToBlob({type:"image/jpeg",quality:.9});if(e)return void console.log("Worker: Cancelling processImage before sending high-res.");const r=URL.createObjectURL(t);self.postMessage({action:"imageProcessed",id:a,processedImage:r,quality:"high",width:s,height:n})}else console.error("Failed to get 2D context for full canvas")}else console.error("Failed to get 2D context for low-res canvas")}catch(t){e?console.log(`Processing cancelled for image ${a}.`):console.error(`Error processing image ${a}:`,t)}}else if("processBatch"===o.data.action){if(e)return void console.log("Worker: Skipping processBatch due to cancellation.");const{images:a}=o.data;console.log(`Worker: Starting batch processing for ${a.length} images.`);for(const o of a){if(e)return void console.log(`Worker: Cancelling batch processing mid-way (at image ${o.id}).`);const{id:a,src:r,width:s,height:n}=o;try{const o=await fetch(r).then((e=>e.blob())).then((e=>createImageBitmap(e)));if(e)return void console.log(`Worker: Cancelling batch processing during fetch for image ${a}.`);const t=Math.round(s/4),c=Math.round(n/4),i=new OffscreenCanvas(t,c),g=i.getContext("2d");if(g){g.drawImage(o,0,0,t,c);const r=await i.convertToBlob({type:"image/jpeg",quality:.5});if(e)return void console.log(`Worker: Cancelling batch processing before sending low-res for image ${a}.`);const l=URL.createObjectURL(r);self.postMessage({action:"imageProcessed",id:a,processedImage:l,quality:"low",width:t,height:c});const d=new OffscreenCanvas(s,n),h=d.getContext("2d");if(h){h.drawImage(o,0,0,s,n);const t=await d.convertToBlob({type:"image/jpeg",quality:.9});if(e)return void console.log(`Worker: Cancelling batch processing before sending high-res for image ${a}.`);const r=URL.createObjectURL(t);self.postMessage({action:"imageProcessed",id:a,processedImage:r,quality:"high",width:s,height:n})}else console.error(`Failed to get 2D context for full canvas (image ${a})`)}else console.error(`Failed to get 2D context for low-res canvas (image ${a})`)}catch(t){if(e)return void console.log(`Batch processing cancelled for image ${a}.`);console.error(`Error processing image ${a} in batch:`,t)}}console.log("Worker: Finished batch processing.")}};
//# sourceMappingURL=imageProcessorWorker.BHWxsclw.js.map
