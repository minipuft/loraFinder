{"version":3,"file":"imageProcessorWorker.DzbAkOQ5.js","sources":["../src/client/workers/imageProcessorWorker.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\r\n\r\nlet gl: WebGLRenderingContext | null = null;\r\n\r\nasync function initWebGL() {\r\n  const canvas = new OffscreenCanvas(1, 1);\r\n  gl = canvas.getContext('webgl');\r\n  \r\n  if (!gl) {\r\n    console.error('WebGL not supported on this browser.');\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nasync function processImageWithWebGL(img: ImageBitmap, width: number, height: number): Promise<ImageData> {\r\n  if (!gl) return new ImageData(width, height);\r\n\r\n  const canvas = new OffscreenCanvas(width, height);\r\n  gl = canvas.getContext('webgl')!;\r\n\r\n  // Create a texture\r\n  const texture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\r\n  // Create shaders\r\n  const vertexShaderSource = `\r\n    attribute vec2 a_position;\r\n    varying vec2 v_texCoord;\r\n    void main() {\r\n      gl_Position = vec4(a_position, 0, 1);\r\n      v_texCoord = a_position * 0.5 + 0.5;\r\n    }\r\n  `;\r\n\r\n  const fragmentShaderSource = `\r\n    precision mediump float;\r\n    uniform sampler2D u_image;\r\n    varying vec2 v_texCoord;\r\n    void main() {\r\n      gl_FragColor = texture2D(u_image, v_texCoord);\r\n    }\r\n  `;\r\n\r\n  const vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\r\n  gl.shaderSource(vertexShader, vertexShaderSource);\r\n  gl.compileShader(vertexShader);\r\n\r\n  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\r\n  gl.shaderSource(fragmentShader, fragmentShaderSource);\r\n  gl.compileShader(fragmentShader);\r\n\r\n  const program = gl.createProgram()!;\r\n  gl.attachShader(program, vertexShader);\r\n  gl.attachShader(program, fragmentShader);\r\n  gl.linkProgram(program);\r\n  gl.useProgram(program);\r\n\r\n  // Set up attributes and uniforms\r\n  const positionBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]), gl.STATIC_DRAW);\r\n\r\n  const positionLocation = gl.getAttribLocation(program, 'a_position');\r\n  gl.enableVertexAttribArray(positionLocation);\r\n  gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n  // Draw\r\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n\r\n  // Read pixels\r\n  const pixels = new Uint8ClampedArray(width * height * 4);\r\n  gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n\r\n  return new ImageData(pixels, width, height);\r\n}\r\n\r\nasync function processImageWithCPU(img: ImageBitmap, width: number, height: number): Promise<ImageData> {\r\n  const canvas = new OffscreenCanvas(width, height);\r\n  const ctx = canvas.getContext('2d');\r\n  if (!ctx) throw new Error('Could not get 2D context');\r\n\r\n  ctx.drawImage(img, 0, 0, width, height);\r\n  const imageData = ctx.getImageData(0, 0, width, height);\r\n\r\n  // Apply a simple grayscale effect as an example\r\n  for (let i = 0; i < imageData.data.length; i += 4) {\r\n    const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\r\n    imageData.data[i] = imageData.data[i + 1] = imageData.data[i + 2] = avg;\r\n  }\r\n\r\n  return imageData;\r\n}\r\n\r\nself.onmessage = async (event) => {\r\n  if (event.data.action === 'processImage') {\r\n    const { id, src, width, height } = event.data;\r\n    \r\n    let processedImageData: ImageData;\r\n    \r\n    if (!gl && !(await initWebGL())) {\r\n      console.warn('WebGL not supported, falling back to CPU processing');\r\n      const img = await fetch(src).then(res => res.blob()).then(blob => createImageBitmap(blob));\r\n      processedImageData = await processImageWithCPU(img, width, height);\r\n    } else {\r\n      const img = await fetch(src).then(res => res.blob()).then(blob => createImageBitmap(blob));\r\n      processedImageData = await processImageWithWebGL(img, width, height);\r\n    }\r\n\r\n    const canvas = new OffscreenCanvas(width, height);\r\n    const ctx = canvas.getContext('2d');\r\n    ctx?.putImageData(processedImageData, 0, 0);\r\n\r\n    const blob = await canvas.convertToBlob({ type: 'image/jpeg', quality: 0.9 });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    self.postMessage({ action: 'imageProcessed', id, processedImage: url });\r\n  }\r\n};\r\n"],"names":["gl","self","onmessage","async","event","data","action","id","src","width","height","processedImageData","canvas","OffscreenCanvas","getContext","console","error","initWebGL","img","fetch","then","res","blob","createImageBitmap","ImageData","texture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","useProgram","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","positionLocation","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLE_STRIP","pixels","Uint8ClampedArray","readPixels","processImageWithWebGL","warn","ctx","Error","drawImage","imageData","getImageData","i","length","avg","processImageWithCPU","putImageData","convertToBlob","type","quality","url","URL","createObjectURL","postMessage","processedImage"],"mappings":"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"}