Frontend Overview:
This project implements a Next.js-based frontend with React components, utilizing Tailwind CSS and SASS modules for styling. The application follows a client-first architecture with robust TypeScript integration.

Core Components (/src/components):

1. Application Shell:
   
   AppShell.tsx:
   - Main layout wrapper component with client-side rendering
   - Props: folders, selectedFolder, currentDirectory, zoom, isGrouped, images, isLoading, error, hasMore
   - Integrates navigation, viewing, and background components
   - Uses AppShell.module.scss for layout styling
   - Key dependencies: useCustomProperties hook, ParticleBackground, LottieBackground
   
   Navbar.tsx:
   - Top navigation bar with search integration
   - Zoom controls with custom slider
   - Grouping toggle functionality
   - Current directory display
   - Uses Navbar.module.scss
   
   Sidebar.tsx:
   - Folder navigation with tree view
   - Directory structure visualization
   - Current path display with breadcrumbs
   - Uses Sidebar.module.scss

2. Image Components:
   
   ImageFeed.tsx:
   - Main image grid component with infinite scroll
   - Features:
     - Lightbox integration (yet-another-react-lightbox with plugins)
     - Dynamic column layout (1-8 columns)
     - Intelligent image grouping
     - Intersection Observer for infinite scroll
     - Web Worker-based image processing
     - Framer Motion animations
     - Skeleton loading states
   - Props: folderId, images, isLoading, isGrouped, zoom, sortBy
   - Uses ImageFeed.module.scss
   
   ImageRow.tsx:
   - Responsive image row container
   - Dynamic width calculations
   - Window resize handling
   - Framer Motion animations
   - Image processor integration
   - Uses ImageRow.module.scss
   
   ImageItem.tsx:
   - Individual image component with lazy loading
   - Progressive image loading (low/high quality)
   - Hover effects and animations
   - Error handling
   - Uses ImageItem.module.scss
   
   ImageViewer.tsx:
   - Lightbox integration
   - Image caption support
   - Zoom functionality
   - Thumbnail navigation
   - Counter display
   - Uses ImageViewer.module.scss
   
   ImageSkeleton.tsx:
   - Loading placeholder component
   - Animated shimmer effect
   - Responsive sizing

3. UI Enhancement Components:
   
   SearchBar.tsx:
   - Search input with debouncing
   - Clear functionality
   - Dynamic suggestions
   - Uses SearchBar.module.scss
   
   ZoomSlider.tsx:
   - Custom image size control
   - Smooth transitions
   - Min/max constraints
   
   FileUpload.tsx:
   - Drag and drop support
   - Multiple file handling
   - Progress indication
   - Error handling
   
   Background Components:
   - LottieBackground.tsx: Animated background effects
   - ParticleBackground.tsx: Interactive particle system
   
   ClientWrapper.tsx:
   - Client-side rendering wrapper
   - Hydration handling
   
   ServiceWorkerRegistration.tsx:
   - PWA support
   - Offline functionality
   - Cache management
   
   CurrentDirectoryButton.tsx:
   - Directory navigation
   - Path visualization

4. Data Management:
   
   QueryProvider.tsx:
   - TanStack Query configuration with optimized settings:
     - Separate configs for images and folders
     - Custom cache durations (5min stale time, 1hr gc time)
     - Configurable retry policies
     - Environment-specific refetch behaviors
   - Error boundary integration with detailed logging
   - Development tools integration
   
   Query Hooks:
   - useImages.ts:
     - Infinite query implementation
     - Cursor-based pagination
     - Type-safe responses with PaginatedResponse<ImageInfo>
     - Configurable grouping and sorting
     - 5-minute stale time, 30-minute cache
   
   - useFolders.ts:
     - Folder structure queries
     - Current directory tracking
     - Mutation handlers for create/delete
     - Automatic query invalidation
     - 1-minute stale time for faster updates
   
   Query Keys:
   - Hierarchical structure
   - Type-safe implementations
   - Optimized for cache management:
     - images.all: Base key for images
     - images.list: Folder-specific queries
     - images.infinite: Paginated queries
     - folders.all: Global folder structure
     - folders.detail: Path-specific folder data

Styles (/src/app/styles):

1. Module SCSS Files:
   - AppShell.module.scss: Layout and container styles
   - Sidebar.module.scss: Navigation and tree view styles
   - ImageFeed.module.scss: Grid and masonry layout
   - ImageRow.module.scss: Row container styles
   - ImageItem.module.scss: Individual image styles
   - ImageViewer.module.scss: Lightbox styles
   - Navbar.module.scss: Navigation styles
   - SearchBar.module.scss: Search input styles
   - ParticleBackground.module.scss: Particle effects
   - LottieBackground.module.scss: Animation styles
   - CurrentDirectoryButton.module.scss: Directory navigation

2. Global Styles:
   globals.scss:
   - Tailwind directives
   - Base styles
   - Typography
   - Animation keyframes
   
   variables.scss:
   - Color schemes
   - Breakpoints
   - Animation timings
   - Layout constants

Performance Optimizations:
- Client-side rendering with hydration
- Image lazy loading and progressive loading
- Web Workers for image processing
- Intersection Observer for infinite scroll
- Memoized components with React.memo
- Dynamic imports for code splitting
- Service Worker for offline support

Animation Features:
- Framer Motion integration
- SCSS transitions
- Loading skeletons
- Hover effects
- Page transitions
- Particle effects

Development Tools:
- TypeScript with strict mode
- CSS modules
- Tailwind CSS
- PostCSS processing
- Environment variables
- Hot module replacement