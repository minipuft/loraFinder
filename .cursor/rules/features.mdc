---
description: This document outlines the core features of the MediaFlow application.
globs:
alwaysApply: false
---
# Features

This document outlines the core features of the MediaFlow application.

## 1. Image & Folder Management

- **Hierarchical Navigation:** Users can browse image files organized within a nested folder structure originating from the configured `MAIN_DIRECTORY`.
- **Folder Data API:** The `/api/folders` endpoint provides data about folder contents.
- **Image Data API:** The `/api/images`, `/api/image`, and `/api/image/[...params]` endpoints provide data for individual images or lists of images within folders.
- **Upload Functionality:** Users can upload new image files via the `/api/upload` endpoint (specific UI implementation details may vary).
- **LoRA Preview Support:** Clean and process LoRA preview files (e.g., `.example.x`) for accurate display.

## 2. Image Viewing

- **Masonry Grid Layout:** Images are displayed in a responsive masonry grid, adapting to different screen sizes.
- **Multiple View Modes:** Users can switch between Grid, Banner, Masonry, Carousel, and Grouped layouts seamlessly.
- **Lazy Loading:** Images are loaded progressively as the user scrolls to improve initial load time and performance.
- **SSR (Server-Side Rendering):** Initial page loads are rendered on the server for faster perceived performance and better SEO.
- **Image Processing:** The backend uses Sharp for potential image processing tasks (e.g., thumbnail generation, although specific implementation details should be verified).
- **Caching:** Client-side (React Query with IDB persistence via `src/lib/queryClient/idbPersister.ts`, and specific caches like `src/lib/cache/feedStateCache.ts`) and server-side (`lru-cache` via `src/server/lib/cache/providers/lruCache.ts`) mechanisms are used to speed up repeated data access.

## 3. Search

- **Full-Text Search:** Users can search for images across all accessible folders using the `/api/search` endpoint.
- **Search Results Display:** Search results are presented, likely within the same responsive layout.

## 4. Performance & Optimization

- **Vite Build System:** Utilizes Vite for fast development server startup and optimized production builds.
- **React Query:** Manages server state, caching (with IndexedDB persistence), and background updates efficiently on the client.
- **Code Splitting:** Vite handles automatic code splitting for optimized JavaScript loading.
- **Web Workers:** Extensive use of web workers (`src/workers/`) for offloading intensive tasks:
    - `imageProcessorWorker.worker.ts` (Comlink-based, for image resizing/format conversion).
    - `animationCoordinator.worker.ts` (Comlink-based, for sequencing complex animations).
    - `layoutWorker.worker.ts` (for layout calculations).
    - `groupingWorker.worker.ts` (for image grouping logic).
    - `colorExtractor.worker.ts` (for extracting dominant colors).
    - Managed by `src/workers/workerPool.ts` and potentially `src/workers/imageProcessor.ts`.
- **Scroll Prefetch Optimization:** The `usePrefetchManager` hook (`src/hooks/usePrefetchManager.ts`) now uses a fixed-size max-heap (`src/utils/MaxHeap.ts`) with a distance-based priority calculation (`src/utils/priorityCalculator.ts`) to efficiently select and prefetch offscreen images based on proximity to the viewport.

## 5. Development & Tooling

- **TypeScript:** Provides static typing for improved code quality and maintainability.
- **SCSS Modules + Tailwind CSS:** Offers a flexible and powerful styling solution.
- **ESLint & Prettier:** Enforce consistent code style and quality.
- **Commitlint:** Enforces conventional commit message format.
- **Husky & lint-staged:** Automate checks before commits.

## 6. Animations

- **Core Animation System:** Built around GSAP, with `AnimationPipeline` instances (`src/animations/AnimationPipeline.ts`) for orchestrating timelines. These pipelines are typically obtained and managed via the `useAnimationPipeline` hook provided by `AnimationManagerProvider` (`src/animations/AnimationManager.tsx`). The system supports reusable `presets` (from `src/animations/presets/`).
- **Event-Driven Orchestration:** The `AnimationControllerContext` (`src/contexts/AnimationControllerContext.tsx`) allows `AnimationPipeline` instances to be registered and triggered in response to named application-wide events (e.g., `pageEnter`), enabling declarative control.
- **Custom Eases & Scroll Animations:** Defines custom easing functions and utilizes `ScrollTriggerManager` (`src/utils/ScrollTriggerManager.ts`) for scroll-triggered effects, integrated with GSAP timelines.
- **Integration with UI:** Components use `useAnimationPipeline` to get pipeline instances and `useAnimationController` to register for or trigger global animation events.
- **Performance Considerations:** Animation logic can be offloaded to workers (e.g., `animationCoordinator.worker.ts`). Main-thread animations are optimized, and utilities like `throttleDebounce` (`src/utils/throttleDebounce.ts`) are available.
- **Grouping & Ungrouping Animations:** Implements a hybrid approach combining GSAP (e.g., `src/animations/presets/GroupingAnimator.ts`) for piling cards into a deck and Framer Motion's `<AnimatePresence>` exit variants in `src/components/ImageRow.tsx` for spreading them back into the grid, coordinated by the unified effect in `src/components/ImageFeed.tsx`.
- **Enhanced Drag & Drop (Image Feed):**
  - Utilizes `@dnd-kit` for robust drag-and-drop logic.
  - Integrates Framer Motion for smooth, animated item reordering (`layout` prop).
  - Provides clear visual feedback via item scaling/shadow variants during drag.
  - Displays contextual drop indicators ('before'/'after') for precise placement.

## Edge Cases & Business Rules

- **File Access:** The application only has access to files within the `MAIN_DIRECTORY` specified in the environment variables.
- **Error Handling:** Robust error handling should be implemented for API requests, file system operations, and image processing (e.g., using `src/utils/errorHandler.ts`).
- **Security:** File uploads should be validated (e.g., file type, size limits). API endpoints should be secured against unauthorized access if applicable.
- **Large Directories:** Performance considerations for very large directories or large numbers of images need to be addressed (e.g., pagination, efficient querying).
- **Unsupported File Types:** How the application handles non-image files or unsupported image formats needs definition.
