---
description: Guidelines on implementing a plan into our codebase.
globs:
alwaysApply: false
---
# Implementation Details

## 1. Development Approach

- **Frameworks:** React 18 (Frontend), Express (Backend).
- **Build Tool:** Vite is used for both client and server builds, enabling features like Hot Module Replacement (HMR) during development and optimized bundles for production. Vite also facilitates Server-Side Rendering (SSR).
- **Language:** TypeScript is used across the entire project (frontend and backend) for type safety and improved developer experience.
- **Styling:** SCSS Modules are used for component-scoped styles, complemented by Tailwind CSS for utility classes and rapid prototyping.
- **State Management & Prefetch Optimization:** React Query handles server state. For scroll-prefetch, `usePrefetchManager` (in `src/hooks/usePrefetchManager.ts`) now accepts `layoutDataMap` and `feedCenter`, using a fixed-size max-heap (`src/utils/MaxHeap.ts`) and a distance-based priority function (`src/utils/priorityCalculator.ts`) to efficiently select offscreen images closest to the viewport. Client-side UI state is managed within components using React hooks (`useState`, `useReducer`) or potentially shared via Context API (`src/contexts/`).
- **API Communication:** The frontend communicates with the backend Express API using `axios` (or native `fetch`), likely managed through abstractions in `src/api/` and integrated with React Query.
- **Server:** The Express server (`server.ts`) handles:
  - Serving API endpoints under `/api`.
  - Serving static assets from the `public/` directory.
  - Integrating with Vite middleware for development and SSR.
  - Rendering the React application server-side via `src/entry-server.tsx`.

## 2. Coding Standards

- **Formatting:** Prettier is used for automatic code formatting. Configuration is likely in `prettier.config.js` or `.prettierrc.json`.
- **Linting:** ESLint is used for identifying potential code issues and enforcing style guidelines. Configuration is likely in `.eslintrc.js` or `.eslintrc.cjs`.
- **TypeScript:** Strict mode (`"strict": true` in `tsconfig.json`) is enabled. Follow TypeScript best practices for type definitions and usage.
- **Naming Conventions:** Follow standard JavaScript/TypeScript naming conventions (e.g., camelCase for variables/functions, PascalCase for components/classes/types).
- **Component Structure:** Keep components modular and focused on a single responsibility. Utilize `src/components/` for reusable UI elements and `src/pages/` for page-level views.
- **SCSS:** Use SCSS Modules (`*.module.scss`) for component styles to avoid global scope conflicts.
- **Commits:** Follow the Conventional Commits specification, enforced by `commitlint.config.js`.

## 3. Technical Guidelines

- **Environment Variables:** Use `.env` files for configuration (e.g., `VITE_PORT`, `VITE_HOST`, `MAIN_DIRECTORY`). Access them using `process.env` on the server and `import.meta.env` on the Vite client.
- **Error Handling:** Implement consistent error handling for API calls (client-side) and server-side operations (API routes, file system access).
- **SSR Considerations:** Ensure components are SSR-compatible. Avoid direct DOM manipulation outside of `useEffect` hooks. Be mindful of code that relies solely on browser APIs during server rendering.
- **Animation Integration:**
  - The core animation pipeline remains powered by GSAP via `AnimationPipeline` (`src/animations/AnimationPipeline.ts`).
    - GSAP presets for the pipeline are defined in feature-specific files (e.g., `itemPresets.ts`, `rowPresets.ts`, `generalGsapPresets.ts`) under `src/animations/presets/` and exported collectively as `gsapConfigs` from `src/animations/presets/index.ts`.
  - For grid grouping/ungrouping, a new hybrid approach is used:
    1. `GroupingAnimator` (`src/animations/GroupingAnimator.ts`) orchestrates GSAP timelines to pile cards into a deck on grouping transitions.
    2. Framer Motion's `<AnimatePresence>` and `exit` variants in `ImageRow` handle ungrouping, smoothly flying cards back to the grid before removal.
    3. A unified effect in `ImageFeed` defers React state updates until after the GSAP animation on grouping, or immediately on ungrouping, ensuring continuous 60fps flow.
  - Components should use **Framer Motion** directly for declarative animations:
    - Use `<AnimatePresence>` for mount/unmount animations.
    - Use the `layout` prop for automatic layout transitions.
    - Use `variants` and the `animate` prop for state-driven UI animations.
    - Framer Motion presets (`motionVariants`) are defined in `src/animations/presets/uiEffects/framerPresets.ts` and exported via `src/animations/presets/index.ts` for potential reuse (e.g., with the currently unused `MotionPreset.tsx` component or direct import).
  - **Drag & Drop:**
    - Logic (drag start, over, end events; item reordering) is handled by `@dnd-kit/core` and `@dnd-kit/sortable`, primarily configured within `src/contexts/DragContext.tsx`.
    - Visuals (drag state appearance, drop target highlighting, indicators) are now primarily controlled imperatively via the `AnimationPipeline` within `ImageItem.tsx` and `ImageRow.tsx`, using GSAP presets defined in `src/animations/presets/dragDrop/`.
    - Framer Motion's `layout` prop is still used on `ImageRow` and `ImageItem`'s wrapper `motion.div` for smooth positional adjustments during/after reordering.
- **Dependencies:** Keep dependencies up-to-date. Use `npm install` for adding dependencies. Validate dependencies using `npm run validate:deps`.
- **Security:** Sanitize user inputs, validate data using libraries like Zod, be mindful of file system access permissions, and avoid exposing sensitive information.

## 3.1 Code Splitting & Lazy Loading

- **Route-Level Splitting:**
  - Use `react-router-dom@6` with dynamic imports via `React.lazy` in `src/routes/AppRouter.tsx`.
  - Wrap all `<Routes>` in `<Suspense>` with a `<Spinner />` fallback (create `src/components/Spinner.tsx`).
  - Replace the top-level `<App />` in `src/main.tsx` with `<AppRouter />`, wrapped by `AnimationControllerProvider` and `ColorProvider`.

- **SSR Streaming Integration:**
  - Swap server rendering from `renderToString` to `renderToPipeableStream` in `src/entry-server.tsx` and `server.ts`.
  - Use `<StaticRouter>` from `react-router-dom/server`, split `index.html` around `<!--ssr-outlet-->`, and stream head, content, and tail.
  - Ensure proper `Content-Type` header and error handling in the streaming callbacks.

- **View & Widget-Level Splitting:**
  - Create `src/lazy/widgets.ts` exporting `LazyImageFeed`, `LazyMasonryView`, `LazyCarouselView`, `LazyBannerView` via `React.lazy`.
  - In `ImageViewer.tsx`, wrap `<LazyImageFeed>` in `<Suspense>` + `<ErrorBoundary>` (create `ErrorBoundary` component).
  - In `ImageFeed.tsx`, replace direct imports of view components with lazy variants from `src/lazy/widgets.ts`, wrapped in `<Suspense>` + `<ErrorBoundary>`.

- **Prefetching:**
  - Add `onMouseEnter={() => import('../pages/Gallery')}` (and similar for future routes) on navigation `<Link>` elements to prefetch route chunks.

- **Testing & Validation:**
  - Write Jest + React Testing Library unit tests for `AppRouter` to assert correct route rendering.
  - Add Supertest SSR integration tests for streaming endpoint, verifying minimal SSR output and non-inclusion of non-current chunks.
  - Create E2E tests (Cypress or Playwright) that navigate between routes and confirm on-demand chunk loading via network inspection.

## 3.2 Suspense Integration (Folder & Image Loading)

- **Folder Change Skeleton (Phase 1):**
  - **Data Fetching:** Modified `src/hooks/query/useFolderImages.ts` to use `useSuspenseQuery` instead of `useQuery`. This hook now throws a promise when fetching data for a new folder, triggering the nearest Suspense boundary. Removed `placeholderData` logic.
  - **Skeleton Component:** Created `src/components/ImageFeedSkeleton.tsx`. This component calculates an estimated grid layout (columns, rows) using `src/utils/layoutCalculator.ts` based on container width, view mode, and zoom props. It renders a grid of `src/components/ImageSkeleton.tsx` components as placeholders.
  - **Suspense Boundary:** Located the parent component rendering `<LazyImageFeed>` (in `src/components/ImageViewer.tsx`). Wrapped `<LazyImageFeed>` within a `<Suspense key={selectedFolder} fallback={<ImageFeedSkeleton ... />}>` boundary. The `key={selectedFolder}` ensures the boundary resets and shows the fallback immediately upon folder path change. Container width is measured in `ImageViewer` and passed to the skeleton.

- **Per-Image Suspense (Phase 2):**
  - **Image Resource:** Created `src/utils/imageResource.ts`. This utility exports an object with a `read(src)` method that manages a cache (`Map`) of image loading promises. Calling `read()` initiates image loading if not cached and throws the promise if loading is in progress (integrating with React Suspense).
  - **Suspense Image Component:** Created `src/components/SuspenseImage.tsx`. This component takes standard `<img>` props, calls `imageResource.read(src)`, and renders the actual `<img>` tag only after the promise resolves (i.e., the image is loaded).
  - **Integration:** Modified `src/components/ImageItem.tsx`. Replaced the previous image rendering logic (which included internal `ResponsiveImage` and placeholder state) with the new `<SuspenseImage />`. Wrapped this component within `<Suspense fallback={<ImageSkeleton ... />}>` to show a per-image skeleton during load, and further wrapped by `<ErrorBoundary>` to catch potential loading errors from the image resource or component. The `src` passed to `SuspenseImage` prioritizes high/low-res blob URLs obtained via context before falling back to the original image source.

## 4. Caching Strategy

- **Client-Side:**
  - **React Query:** Manages caching of server state (API responses).
    - **Persistence:** The cache is persisted across browser sessions using IndexedDB. This is achieved via `@tanstack/query-persist-client-core` and a custom persister (`src/lib/queryClient/idbPersister.ts`) built with the `idb` library.
    - **Configuration:** The cache has a garbage collection time (`gcTime`) and persistence duration (`maxAge`) set to 24 hours (see `src/lib/queryClient.ts`).
  - **IndexedDB (`idb`):** Also used for persistent client-side storage of UI state like scroll positions (`src/lib/cache/feedStateCache.ts`).
- **Server-Side:**
  - **LRU Cache (`lru-cache`):** An in-memory Least Recently Used (LRU) cache is implemented (`src/server/lib/cache/`) to store frequently accessed, computationally inexpensive data (e.g., image dimensions read from disk).
    - **Implementation:** Uses a common `CacheProvider` interface (`src/server/lib/cache/types.ts`), an LRU provider (`src/server/lib/cache/providers/lruCache.ts`), and a factory function (`src/server/lib/cache/index.ts`).
    - **Configuration:** Configurable via environment variables (`SERVER_LRU_MAX_ITEMS`, `SERVER_LRU_TTL_MS`).
    - **Goal:** Reduce redundant disk I/O and improve response times for repeated requests.
  - **Other (Potential):** `node-cache` might be used for other server-side caching needs if LRU semantics are not required.

## TODO

### Zod Integration
- Integrate Zod schemas into Express API endpoints and client-side form validation for safety and type correctness.

### Animation Enhancements
- Scrolling animations with our new `AnimationPipeline` (hybrid GSAP timeline + Framer Motion `motion.div` transitions); revisit the docs for guidance.
- Smooth zooming animations for image previews and group transitions.
- Pinch-to-zoom support on touch devices.
- Scroll-triggered animations via `ScrollTriggerManager' and 'useScrollAnimations'.
