Backend Overview:
This project implements a Node.js backend using Express.js to serve a RESTful API for managing and retrieving images and folders. The backend is designed to work with a React frontend and supports server-side rendering (SSR).

Key Components:

1. API Routes (src/api/):
   - folders.ts: Handles fetching folder information
   - images.ts: Manages image retrieval and metadata
   - image.ts: Serves individual images
   - search.ts: Implements image search functionality
   - upload.ts: Handles file uploads
   - getCurrentDirectory.ts: Retrieves the current working directory
   - image/[...params].ts: Dynamic route for serving images with various parameters

2. Workers:
   - imageProcessor.ts: Handles image processing tasks
   - layoutWorker.ts: Calculates optimal layout for images
   - workerPool.ts: Manages a pool of workers for parallel processing

3. Utility Functions (src/utils/):
   - imageUtils.ts: Contains utility functions for image processing and management
     - Content type determination
     - Image file validation
     - Image title extraction
     - Thumbnail path generation
     - File size validation
     - Grouping images by name

4. API Library (src/lib/):
   - api.ts: Implements API functions for communicating with the backend
     - Axios-based HTTP requests
     - Error handling and response processing

5. Constants (src/utils/constants.ts):
   - Defines important constants used throughout the application
   - Includes cache TTL, maximum upload size, supported image formats, and API base URL

Technologies and Libraries:
- Express.js for routing and middleware
- Sharp for image processing and metadata extraction
- Formidable for handling file uploads
- fs and path modules for file system operations
- IndexedDB (idb) for client-side caching
- Web Workers for offloading heavy computations
- WebGL for image processing (with CPU fallback)
- Axios for HTTP requests
- React Query for efficient data fetching and caching

Key Features:
1. Folder listing and navigation
2. Image retrieval with metadata (dimensions, file type)
3. Image search functionality
4. File upload support
5. Dynamic image serving with content type detection
6. Environment variable configuration (MAIN_DIRECTORY)
7. Efficient image processing using Web Workers and WebGL
8. Optimal image layout calculation
9. Client-side caching of processed images
10. Utility functions for image processing and management
11. Centralized API functions for frontend-backend communication

API Endpoints:
1. GET /api/folders: List all folders
2. GET /api/images: Retrieve images in a specific folder
3. GET /api/image: Serve individual images
4. GET /api/search: Search for images across all folders
5. POST /api/upload: Upload files to a specified folder
6. GET /api/getCurrentDirectory: Get the current main directory
7. GET /api/image/*: Dynamic route for serving images with various parameters

Data Models:
1. ImageInfo: Represents image metadata including dimensions and grouping information
2. FolderInfo: Represents folder information
3. ApiResponse: Generic interface for API responses

Error Handling:
- Each route implements error handling and returns appropriate HTTP status codes
- Console logging for debugging and error tracking
- Axios error handling for API requests

Security Considerations:
- File type validation for uploads and image serving
- CORS headers implemented for image serving
- Maximum upload size limit (defined in constants)

Performance Optimizations:
- Use of Web Workers for parallel image processing
- WebGL-based image processing with CPU fallback
- Client-side caching of processed images using IndexedDB
- Efficient image layout calculation using dedicated worker
- Memoization of filtered images in MainContent component

Development Considerations:
- The application uses environment variables (e.g., MAIN_DIRECTORY) for configuration
- Extensive use of async/await for handling asynchronous operations
- Modular design with separate route files for each API endpoint
- TypeScript used for type safety and better developer experience
- React Query used for efficient data fetching and caching on the frontend
- Utility functions in imageUtils.ts for common image-related operations
- Centralized API functions in api.ts for consistent frontend-backend communication
- Constants defined in constants.ts for easy configuration and maintenance

Next Steps:
1. Implement user authentication and authorization
2. Add input validation and sanitization for all API endpoints